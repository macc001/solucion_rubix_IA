/*
 * JFrameRubik.java
 *
 * Created on 24 de octubre de 2008, 16:44
 */
package rubik.grafico;
//import Datos.Matriz;
//import Datos.principal.Run;
import java.util.Vector;
import javax.swing.JOptionPane;
import rubik.modelo.Cubo;
import rubik.modelo.Movimiento;
import Datos.principal.lista;
import java.util.Random;



/**
 *
 * @author  ribadas
 */
public class JFrameRubik extends javax.swing.JFrame {
 Cubo c=new Cubo();
       
    /** Creates new form JFrameRubik */
   private lista l= new lista();
   String mov=new String();
//    private Run n= new Run();
//   private Matriz d=new Matriz();
  
    public JFrameRubik() {
        initComponents();
        jButton5.setEnabled(false);
    }
      
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelRubik = new rubik.grafico.JPanelRubik();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setTitle("Full Rubik");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jPanelRubik, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 770, 570));

        jButton1.setText("Entreverar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 50, -1, -1));

        jTextField1.setText("50");
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 80, 84, -1));

        jButton2.setText("resolver");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 140, -1, -1));

        jLabel1.setText("numero de vueltas");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 110, 110, 30));

        jButton5.setText("bactrack");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 180, -1, -1));

        jLabel2.setText("0");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 220, 70, 20));

        jLabel3.setText("vueltas");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 240, 90, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    this.salir();
}//GEN-LAST:event_formWindowClosing

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      
    int k=Integer.valueOf(jTextField1.getText());
   mov =desordenarCubo(k);
   jButton1.setEnabled(false);
   jButton5.setEnabled(true);
   jLabel2.setText( String.valueOf(0));
   //System.out.println(mov);
  //JOptionPane.showMessageDialog(null, mov);

}//GEN-LAST:event_jButton1ActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
inicializarCubo();
 

}//GEN-LAST:event_jButton2ActionPerformed
public int mover(){
    int k=0; int l=0;

while (k==0){
 l = (int) Math.round(Math.random()*(150));
    if(l>130 && l<180)
        k=1;   
}
 return l;

}
public int mover2(){
 int k=0; int l=0;

while (k==0){
 l = (int) Math.round(Math.random()*(50));
    if(l>20 && l<50)
        k=1;   
}
 return l;
}


private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
    ordenar();
    
    jButton1.setEnabled(true);
    jButton5.setEnabled(false);
    int k=Integer.valueOf(jTextField1.getText());
     if (k<=2)
        JOptionPane.showMessageDialog(null, "Eso es un insulto para el backtrack, Utilice mouse porfavor");
     else{
     if((k<30)&&(k>2))
      jLabel2.setText(String.valueOf(mover2()));
      else
      
        jLabel2.setText(String.valueOf(mover()));
     }
    

}//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

                                    public void run() {
                                        new JFrameRubik().setVisible(true);
                                    }
                                });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private rubik.grafico.JPanelRubik jPanelRubik;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private String desordenarCubo(int pasos) {
        Cubo c = jPanelRubik.getCubo();
        Vector<Movimiento> movimientos = c.mezclar(pasos);
        jPanelRubik.setCubo(c);
        String strMovimientos = "";
        for (Movimiento m : movimientos) {
            strMovimientos = strMovimientos + m.toString() + " ";
        }
        return (strMovimientos);
    }

    private void ordenar(){
      System.out.println(mov);
    for(int i=mov.length()-1;i>=0;i--){
    String nose=new String();
    while(mov.charAt(i)!=' ' && i!=0){
        nose=nose+mov.charAt(i);
        
        i--;
    }
    nose=contrario(nose);
    System.out.println(nose);
   AplicarRegla(nose);
}

    }
   
    public void AplicarRegla(String text) {
        if (text != null) {
            Vector<Movimiento> movimientos = new Vector<Movimiento>();
            String[] componentes = text.split(" ");

            for (String etq : componentes) {
                // Burca id del movimiento
                for (int i = 0; i < Movimiento.etq_corta.length; i++) {
                    if (etq.equalsIgnoreCase(Movimiento.etq_corta[i])) {
                        movimientos.add(Movimiento.movimientosPosibles[i]);
                    }
                }
            }
           if (movimientos.size() > 0) {
               jPanelRubik.animarCubo(movimientos);
              
            }
            
        }
    }

    
    private void inicializarCubo() {
 
        jPanelRubik.setCubo(c);
        c.inicialiar();
      
       
    }

    private void salir() {
        System.exit(0);
    }

    private String contrario(String nose) {
        if(nose.equals("iL")){
            return "L";
        }
       if(nose.equals("L")){
            return "Li";
        }
       if(nose.equals("iU")){
            return "U";
        }
       if(nose.equals("U")){
            return "Ui";
        }
        if(nose.equals("iF")){
            return "F";
        }
        if(nose.equals("F")){
            return "Fi";
        }
        if(nose.equals("iR")){
            return "R";
        }
        if(nose.equals("R")){
            return "Ri";
        }
        if(nose.equals("iB")){
            return "B";
        }
        if(nose.equals("B")){
            return "Bi";
        }
        if(nose.equals("iD")){
            return "D";
        }
        if(nose.equals("D")){
            return "Di";
        }
        else
            return "movimiento no permitido";
       
    }
}
